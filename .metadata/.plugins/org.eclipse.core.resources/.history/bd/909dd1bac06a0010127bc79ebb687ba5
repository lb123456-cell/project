package com.example.backend.Controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.httptatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.security.web.bind.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.backend.entity.Payment;
import com.example.backend.requestmodels.PaymentInfoRequest;
import com.example.backend.service.PaymentService;
import com.example.backend.utils.ExtractJWT;
import com.stripe.exception.StripeException;
import com.stripe.model.PaymentIntent;

@CrossOrigin("http://localhost:3000")
@RestController
@RequestMapping("/api/payment/secure")
public class PaymentController {
	
	private PaymentService paymentService;
	
	@Autowired
	public PaymentController(PaymentService paymentService) {
		this.paymentService = paymentService;
	}

	@PostMapping("/payment-intent")
	public ResponseEntity<String> createPaymentIntent(@RequestBody PaymentInfoRequest paymentInfoRequest)
		throws StripeException {
		
		PaymentIntent paymentIntent = paymentService.createPaymentIntent(paymentInfoRequest);
		String paymentStr = paymentIntent.toJson();
		
		return new ResponseEntity<>(paymentStr, httptatus.OK);
	}
	
	@PutMapping("/payment-complete")
	public ResponseEntity<String> stripePaymentComplete(@RequestHeader(value="Authorization")String token)
		throws Exception {
		String userEmail = ExtractJWT.payLoadJWTExtraction(token, "sub");
		if(userEmail == null) {
			throw new Exception("User email is missing");
		}
		return paymentService.stripePayment(userEmail);
	}
	
	@GetMapping("/user")
	public ResponseEntity<?> getUserPayment(@RequestHeader(value = "Authorization") String token) throws Exception {
	    String userEmail = ExtractJWT.payLoadJWTExtraction(token, "sub");
	    if (userEmail == null) {
	        throw new Exception("User email is missing");
	    }

	    Payment payment = paymentService.getUserPayment(userEmail);
	    if (payment == null) {
	        return new ResponseEntity<>("No payment record found", httptatus.NOT_FOUND);
	    }

	    return ResponseEntity.ok(payment);
	}

	
}