package com.example.backend.Controller;

import com.example.backend.entity.Jewelry;
import com.example.backend.service.JewelryService;
import com.example.backend.utils.ExtractJWT;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/jewelries")
@CrossOrigin("http://localhost:3000")
public class JewelryController {

    private final JewelryService jewelryService;

    public JewelryController(JewelryService jewelryService) {
        this.jewelryService = jewelryService;
    }

    @PutMapping("/secure/checkout")
    public Jewelry checkoutJewelry(@RequestHeader("Authorization") String token,
                                   @RequestParam Long jewelryId) throws Exception {
        String userEmail = ExtractJWT.payLoadJWTExtraction(token, "sub");
        return jewelryService.checkoutJewelry(userEmail, jewelryId);
    }

    @GetMapping("/ping")
    public String ping() {
        return "JewelryController is working!";
    }

    @GetMapping("/test")
    public String test() {
        return "Controller is working!";
    }

    @GetMapping("/secure/test-auth")
    public String testSecure(@RequestHeader("Authorization") String token) {
        String userEmail = ExtractJWT.payLoadJWTExtraction(token, "sub");
        return "Secure is working for: " + userEmail;
    }

    @GetMapping("/secure/ischeckedout/byuser")
    public Boolean isCheckedOutByUser(@RequestHeader("Authorization") String token,
                                      @RequestParam Long jewelryId) {
        String userEmail = ExtractJWT.payLoadJWTExtraction(token, "sub");
        return jewelryService.isJewelryCheckedOutByUser(userEmail, jewelryId);
    }

    @GetMapping("/secure/currentloans")
    public int currentLoansCount(@RequestHeader("Authorization") String token) {
        String userEmail = ExtractJWT.payLoadJWTExtraction(token, "sub");
        return jewelryService.currentLoanCount(userEmail);
    }

    @GetMapping("/checkout/count")
    public int getCheckoutCount(@RequestParam Long jewelryId) {
        return jewelryService.getCheckoutCountForJewelry(jewelryId);
    }

    // ðŸ’¥ This must come LAST or it will hijack all unmatched GETs
    @GetMapping("/{id}")
    public ResponseEntity<Jewelry> getJewelryById(@PathVariable Long id) {
        return jewelryService.findById(id)
                .map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }
}
