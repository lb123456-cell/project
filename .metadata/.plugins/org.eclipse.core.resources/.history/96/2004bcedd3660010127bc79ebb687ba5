package com.example.backend.config;

import com.okta.spring.boot.oauth.Okta;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.httpecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.accept.ContentNegotiationStrategy;
import org.springframework.web.accept.HeaderContentNegotiationStrategy;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(httpecurity http) throws Exception {

        // Set up CORS and CSRF
        http
            .cors()
            .and()
            .csrf().disable();

        // Secure specific endpoints
        http
            .authorizeHttpRequests(authorize -> authorize
                .requestMatchers("/api/jewelries/secure/**").authenticated()
                .anyRequest().permitAll()
            );

        // Use JWT for resource server
        http
            .oauth2ResourceServer()
            .jwt();

        // Set content negotiation strategy
        http.setSharedObject(ContentNegotiationStrategy.class, new HeaderContentNegotiationStrategy());

        // Custom error response for unauthorized access
        Okta.configureResourceServer401ResponseBody(http);

        return http.build();
    }
}
