package com.example.backend.service;

import java.sql.Date;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.TimeUnit;

import org.springframework.stereotype.Service;

import com.example.backend.dao.CheckoutRepository;
import com.example.backend.dao.JewelryRepository;
import com.example.backend.entity.Checkout;
import com.example.backend.entity.Jewelry;
import com.example.backend.responsemodels.ShelfCurrentLoansResponse;

import jakarta.transaction.Transactional;

@Service
@Transactional
public class JewelryService {

    private final JewelryRepository jewelryRepository;
    private final CheckoutRepository checkoutRepository;

    public JewelryService(JewelryRepository jewelryRepository, CheckoutRepository checkoutRepository) {
        this.jewelryRepository = jewelryRepository;
        this.checkoutRepository = checkoutRepository;
    }

    public Jewelry checkoutJewelry(String userEmail, Long jewelryId) {
        System.out.println("Starting checkout for user: " + userEmail + ", jewelryId: " + jewelryId);

        Jewelry jewelry = jewelryRepository.findById(jewelryId)
                .orElseThrow(() -> new IllegalStateException("Jewelry not found"));

        Optional<Checkout> validateCheckout = checkoutRepository.findByUserEmailAndJewelryId(userEmail, jewelryId);
        if (validateCheckout.isPresent()) {
            throw new IllegalStateException("Jewelry already checked out by user.");
        }

        int currentLoans = checkoutRepository.findByUserEmail(userEmail).size();
        if (currentLoans >= 5) {
            throw new IllegalStateException("User has reached max allowed checkout limit (5).");
        }

        if (jewelry.getStockQuantity() <= 0) {
            throw new IllegalStateException("Jewelry is out of stock.");
        }

        jewelry.setStockQuantity(jewelry.getStockQuantity() - 1);
        jewelryRepository.save(jewelry);

        Checkout checkout = new Checkout(
                userEmail,
                LocalDate.now().toString(),
                LocalDate.now().plusDays(7).toString(),
                jewelry
        );

        checkoutRepository.save(checkout);
        System.out.println("Checkout complete.");
        return jewelry;
    }

    public Boolean isJewelryCheckedOutByUser(String userEmail, Long jewelryId) {
        Optional<Checkout> validateCheckout = checkoutRepository.findByUserEmailAndJewelryId(userEmail, jewelryId);
        return validateCheckout.isPresent();
    }

    public int currentLoanCount(String userEmail) {
        return checkoutRepository.findByUserEmail(userEmail).size();
    }

    public List<ShelfCurrentLoansResponse> currentLoans(String userEmail) throws Exception {

        List<ShelfCurrentLoansResponse> shelfCurrentLoansResponses = new ArrayList<>();

        List<Checkout> checkoutList = checkoutRepository.findByUserEmail(userEmail);
        List<Long> jewelryIdList = new ArrayList<>();

        for (Checkout i : checkoutList) {
            jewelryIdList.add(i.getJewelry().getId());
        }

        List<Jewelry> jewelries = jewelryRepository.findJewelriesByJewelryIds(jewelryIdList);

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

        for (Jewelry jewelry : jewelries) {
            Optional<Checkout> checkout = checkoutList.stream()
                    .filter(x -> x.getJewelry().getId().equals(jewelry.getId()))
                    .findFirst();

            if (checkout.isPresent()) {
                Date d1 = new Date(sdf.parse(checkout.get().getReturnDate()).getTime());
                Date d2 = new Date(sdf.parse(LocalDate.now().toString()).getTime());

                TimeUnit time = TimeUnit.DAYS;

                long difference_In_Time = time.convert(d1.getTime() - d2.getTime(),
                        TimeUnit.MILLISECONDS);

                shelfCurrentLoansResponses.add(new ShelfCurrentLoansResponse(jewelry, (int) difference_In_Time));
            }
        }
        return shelfCurrentLoansResponses;
    }

    public int getCheckoutCountForJewelry(Long jewelryId) {
        return checkoutRepository.countByJewelryId(jewelryId);
    }

    public Optional<Jewelry> findById(Long id) {
        return jewelryRepository.findById(id);
    }
}



	

	